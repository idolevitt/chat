@startuml
class Server{
     static Server serverInstance;
     final static int PORT = 5000;
     private List<ClientHandler> clients;
     private ServerSocket serverSocket;
     private Socket socket;

    Server()
    getInstance()

    getClients()
    removeClient()
    findClient()
    turnOff()

}
class ClientHandler extends Thread{
    Server server;
    Socket socket;
    ObjectOutputStream output;
    DataInputStream dis;
    Boolean isLoggedIn;
    String name;
    Date date;

    ClientHandler()

    classification()
    disconnect()
    online()
    broadcast()
    time()
    sendMessage()
    error()

}

class Client{

    final static String IP;
    final static int PORT;
    Scanner scn;
    Socket socket
    DataOutputStream dos;
    ObjectInputStream input;
    Thread receiveMessage
    Thread sendMessage

    disconnect()

}


message.PrivateMessage -- ClientHandler:object
message.OnlineClientsMessage -- ClientHandler:object
message.DateMessage -- ClientHandler:object
message.CustomMessage -- ClientHandler:object
message.ErrorMessage -- ClientHandler:object
message.HelpMessage -- ClientHandler:object

Client --> Server:initializing socket
Server --> ClientHandler:passing on the socket
Client -> ClientHandler:socket
Client <- ClientHandler:socket

message.Message -- Client

class message.Message{
    Date date

    public abstract void handleMessage()
}

class message.DateMessage extends message.Message{
    handleMessage()
}

class message.OnlineClientsMessage extends message.Message{

    List<String> clients

    handleMessage()
}

class message.PrivateMessage extends message.Message{

    String sender
    String text

    handleMessage()
}

class message.HelpMessage extends message.Message{

    handleMessage()
}

class message.CustomMessage extends message.Message{

    String text

    handleMessage()
}

class message.ErrorMessage extends message.Message{

    String text

    handleMessage()
}
@enduml